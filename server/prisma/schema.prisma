generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  verified Boolean
  online   Boolean @default(false)
  lastSeen DateTime @default(now())
  avatarUrl String?

  messages     Message[]     @relation("SenderMessages")
  participants Participant[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  seenMessages MessageSeenBy[]
  groupAdminIn ConversationAdmin[]

  ownerContacts Contact[] @relation("OwnerContacts")
  contactUsers  Contact[] @relation("ContactUsers")
  ownedConversations  Conversation[]

  @@map("users")
}

model Conversation {
  id           String              @id @default(uuid())
  isGroup      Boolean             @default(false)
  name         String?
  participants Participant[]
  admins       ConversationAdmin[]
  messages     Message[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  avatarUrl    String?
  owner        User?              @relation(fields: [ownerId], references: [id])
  ownerId      String?
  @@map("conversations")
}

model Participant {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  joinedAt       DateTime     @default(now())
  isMuted        Boolean      @default(false) // optional, mute notifications

  @@unique([userId, conversationId])
  @@map("participants")
}

model ConversationAdmin {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  @@unique([conversationId, userId])
  @@map("conversation_admins")
}

model Message {
  id             String          @id @default(uuid())
  content        String?
  type           MessageType     @default(TEXT)
  mediaUrl       String?
  sender         User            @relation("SenderMessages", fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation    @relation(fields: [conversationId], references: [id])
  conversationId String
  seenBy         MessageSeenBy[]
  createdAt      DateTime        @default(now())

  // New fields for frontend
  status         String?         // e.g., 'sending' | 'sent' | ...
  fileName       String?
  fileSize       Int?
  editedAt       DateTime?
  reactions      Json?           // array of { emoji, count, users }
  readAt         DateTime?
  deliveredAt    DateTime?
  sentAt         DateTime?

  @@map("messages")
}

model MessageSeenBy {
  id        String   @id @default(uuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  seenAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@map("message_seen_by")
}

model Contact {
  id        String   @id @default(uuid())
  owner     User     @relation("OwnerContacts", fields: [ownerId], references: [id])
  ownerId   String
  contact   User     @relation("ContactUsers", fields: [contactId], references: [id])
  contactId String
  nickname  String?
  blocked   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([ownerId, contactId]) // Prevent duplicate entries
  @@map("contacts")
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}
